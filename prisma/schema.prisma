/**
 * Defines the primary database connection for the application.
 * This datasource block specifies the database provider which is PostgreSQL,
 * and the connection URL, which is typically loaded from an environment variable.
 * Adjust the URL as needed to match your deployment environment.
 */
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

/**
 * Configures the Prisma Client generator.
 * This block specifies that the Prisma Client should be generated using the JavaScript provider,
 * and the output directory for the generated client code.
 */
generator client {
    provider = "prisma-client-js"
}

enum UserRole {
    user
    admin
}

model User {
    id        String   @id @default(uuid())
    full_name String
    email     String   @unique
    password  String
    role      UserRole @default(user)

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    generated_course Course?
    selected_course  SelectedCourse?
    chapter_progress CourseProgress[]
}

model Topic {
    id          String @id @default(cuid())
    name        String @unique
    description String @db.Text

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    courses Course[]
}

enum CourseDifficulty {
    Beginner
    Intermediate
    Advanced
}

model Course {
    id String @id @default(cuid())

    title       String
    description String @db.Text

    topic_id   String
    difficulty CourseDifficulty
    topic      Topic            @relation(fields: [topic_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

    generated_by String @unique

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    generated_by_user User             @relation(fields: [generated_by], references: [id], onDelete: Cascade, onUpdate: Cascade)
    chapters          Chapter[]
    SelectedCourse    SelectedCourse[]

    @@unique([topic_id, difficulty])
}

model Chapter {
    id          String @id @default(cuid())
    course_id   String
    order_index Int

    title        String
    description  String  @db.Text
    content_json Json?   @db.Json
    video_url    String? @db.Text

    is_active Boolean @default(false)

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    course   Course           @relation(fields: [course_id], references: [id], onDelete: Cascade)
    progress CourseProgress[]

    @@unique([course_id, order_index])
    @@index([course_id, order_index])
}

model SelectedCourse {
    user_id   String @unique
    course_id String @unique

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    user   User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    course Course @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@id([user_id, course_id])
    @@unique([user_id, course_id])
}

model CourseProgress {
    user_id    String
    chapter_id String

    is_done Boolean @default(false)

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    chapter Chapter @relation(fields: [chapter_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@id([user_id, chapter_id])
    @@unique([user_id, chapter_id])
}
