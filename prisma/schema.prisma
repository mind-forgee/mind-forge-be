/**
 * Defines the primary database connection for the application.
 * This datasource block specifies the database provider which is PostgreSQL,
 * and the connection URL, which is typically loaded from an environment variable.
 * Adjust the URL as needed to match your deployment environment.
 */
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

/**
 * Configures the Prisma Client generator.
 * This block specifies that the Prisma Client should be generated using the JavaScript provider,
 * and the output directory for the generated client code.
 */
generator client {
    provider = "prisma-client-js"
}

model User {
    id                  String   @id @default(uuid())
    full_name           String
    email               String   @unique
    password            String
    role                String   @default("user")
    created_at          DateTime @default(now())
    selected_course_key String?
    // Optional relation to User model:
    // topics Topic[]
    // LearningPath LearningPath?
}

model Course {
    id          Int      @id @default(autoincrement())
    course_name String
    course_key  String // = course_name.trim().toLowerCase()
    description String
    difficulty  String
    created_at  DateTime @default(now())

    chapter Chapter[]
}

model Chapter {
    id           String   @id @default(uuid())
    course_id    Int
    order_index  Int
    chapter_name String
    description  String
    content_json Json?
    created_at   DateTime @default(now())
    updated_at   DateTime @updatedAt
    course       Course   @relation(fields: [course_id], references: [id], onDelete: Cascade)

    @@unique([course_id, order_index])
    @@index([course_id, order_index])
}

// model LearningPath {
//     id        String   @id @default(uuid())
//     userId    String
//     topicId   String
//     level     String
//     createdAt DateTime @default(now())

//     user User @relation(fields: [userId], references: [id])
//     //   topic Topic @relation(fields: [topicId], references: [id])

//     @@unique([userId]) // one topic per user
// }

// model Topic {
//     id          String   @id @default(uuid())
//     name        String   @unique
//     description String?
//     createdBy   String
//     createdAt   DateTime @default(now())

//     // Optional relation to User model:
//     creator    User     @relation(fields: [createdBy], references: [id])
// }
